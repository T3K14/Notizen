\documentclass[paper=a4,10pt]{scrartcl}

\usepackage[utf8x]{inputenc}
\usepackage[ngerman]{babel}
\usepackage[T1]{fontenc}

\usepackage{graphicx}
\usepackage{float}
\usepackage{subcaption}

\usepackage{fancyref}

\usepackage[numbers,square,sort]{natbib} %praktikumsquellenvorgabe
\usepackage{amsmath}
\usepackage{amssymb}

\usepackage{url}
\usepackage{hyperref}

\usepackage[a4paper, includehead, includefoot]{geometry}
\geometry{left=2cm, right=2cm, top=2cm, bottom=2cm}

\begin{document}

\title{OpenGL}
%\author{Author's Name}

\section{Context}
Think of a context as an object that holds all of OpenGL; when a context is destroyed, OpenGL is destroyed. In order for any OpenGL commands to work, a context must be current; all OpenGL commands affect the state of whichever context is current. The current context is a thread-local variable, so a single process can have several threads, each of which has its own current context. However, a single context cannot be current in multiple threads at the same time. (von deren Wiki).  

\textit{Also alle OpenGL commands wirken sich immer nur auf den Zustand des Contexts aus der gerade current ist.}

\section{Fenster erzeugen}
Ich nutze glbinding statt glad. I get the window with \texttt{glfwCreateWindow()} which returns a pointer to an GLFWWindow object. 
After that we tell GLFW to make the context of our window the main context on the current thread with \texttt{glfwMakeContextCurrent(window)}.

\textit{Und mit main context meinen die wohl current context, die Fkt heisst ja sogar schon so.}

\end{document}